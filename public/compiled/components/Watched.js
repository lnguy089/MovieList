import MovieNames from './MovieNames.js';

class Watched extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      watchedList: [],
      unwatchedList: [],
      currVid: []
    };
    this.addToUWArr = this.addToUWArr.bind(this);
    this.addToWArr = this.addToWArr.bind(this);
    this.removeFromUNWArr = this.removeFromUNWArr.bind(this);
    this.removeFromWArr = this.removeFromWArr.bind(this);
  }

  addToWArr(newObject) {
    this.setState({
      watchedList: [...this.state.watchedList, newObject]
    });
  }

  removeFromWArr(key) {
    var newArr = this.state.watchedList;
    var index = newArr.indexOf(array[key]);

    if (index !== -1) {
      newArr.splice(index, 1);
      this.setState({
        watchedList: newArr
      });
    }
  }

  addToUWArr(objectItem) {
    this.setState({
      currVid: [...this.state.unwatchedList, objectItem]
    });
  }

  removeFromUNWArr(key) {
    var newArr = this.state.unwatchedList;
    var index = newArr.indexOf(array[key]);

    if (index !== -1) {
      newArr.splice(index, 1);
      this.setState({
        unwatchedList: newArr
      });
    }
  }

  componentDidUpdate(prevProps) {
    if (this.props.movies !== prevProps.movies) {
      this.setState({
        unwatchedList: this.props.movies
      });
    }
  }

  render() {
    return /*#__PURE__*/React.createElement("form", null, /*#__PURE__*/React.createElement("button", {
      onClick: event => {
        event.preventDefault();
        this.props.chooseMovies(this.state.watchedList);
      }
    }, "watched"), /*#__PURE__*/React.createElement("button", {
      onClick: event => {
        event.preventDefault(); // this.setState({currVid: this.state.unwatchedList})}

        this.props.chooseMovies(this.state.unwatchedList);
      }
    }, "unwatched"), /*#__PURE__*/React.createElement(MovieNames, {
      movieTitle: this.state.currVid,
      removefromUW: this.removeFromUWArr,
      addToUWArr: this.addToUWArr.bind(this),
      addToWArr: this.addToUWArr.bind(this)
    }));
  }

}

export default Watched;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dhdGNoZWQuanN4Il0sIm5hbWVzIjpbIk1vdmllTmFtZXMiLCJXYXRjaGVkIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJ3YXRjaGVkTGlzdCIsInVud2F0Y2hlZExpc3QiLCJjdXJyVmlkIiwiYWRkVG9VV0FyciIsImJpbmQiLCJhZGRUb1dBcnIiLCJyZW1vdmVGcm9tVU5XQXJyIiwicmVtb3ZlRnJvbVdBcnIiLCJuZXdPYmplY3QiLCJzZXRTdGF0ZSIsImtleSIsIm5ld0FyciIsImluZGV4IiwiaW5kZXhPZiIsImFycmF5Iiwic3BsaWNlIiwib2JqZWN0SXRlbSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIm1vdmllcyIsInJlbmRlciIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjaG9vc2VNb3ZpZXMiLCJyZW1vdmVGcm9tVVdBcnIiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFVBQVAsTUFBdUIsaUJBQXZCOztBQUNBLE1BQU1DLE9BQU4sU0FBc0JDLEtBQUssQ0FBQ0MsU0FBNUIsQ0FBc0M7QUFDcENDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsV0FBVyxFQUFHLEVBREg7QUFFWEMsTUFBQUEsYUFBYSxFQUFFLEVBRko7QUFHWEMsTUFBQUEsT0FBTyxFQUFFO0FBSEUsS0FBYjtBQU1BLFNBQUtDLFVBQUwsR0FBa0IsS0FBS0EsVUFBTCxDQUFnQkMsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBbEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtBLFNBQUwsQ0FBZUQsSUFBZixDQUFvQixJQUFwQixDQUFqQjtBQUNBLFNBQUtFLGdCQUFMLEdBQXdCLEtBQUtBLGdCQUFMLENBQXNCRixJQUF0QixDQUEyQixJQUEzQixDQUF4QjtBQUNBLFNBQUtHLGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxDQUFvQkgsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBdEI7QUFFRDs7QUFFREMsRUFBQUEsU0FBUyxDQUFDRyxTQUFELEVBQVk7QUFDbkIsU0FBS0MsUUFBTCxDQUFjO0FBQ1pULE1BQUFBLFdBQVcsRUFBRSxDQUFDLEdBQUcsS0FBS0QsS0FBTCxDQUFXQyxXQUFmLEVBQTRCUSxTQUE1QjtBQURELEtBQWQ7QUFHRDs7QUFDREQsRUFBQUEsY0FBYyxDQUFDRyxHQUFELEVBQU07QUFDbEIsUUFBSUMsTUFBTSxHQUFHLEtBQUtaLEtBQUwsQ0FBV0MsV0FBeEI7QUFDQSxRQUFJWSxLQUFLLEdBQUdELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxLQUFLLENBQUNKLEdBQUQsQ0FBcEIsQ0FBWjs7QUFDQSxRQUFJRSxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCRCxNQUFBQSxNQUFNLENBQUNJLE1BQVAsQ0FBY0gsS0FBZCxFQUFxQixDQUFyQjtBQUNBLFdBQUtILFFBQUwsQ0FBYztBQUFDVCxRQUFBQSxXQUFXLEVBQUVXO0FBQWQsT0FBZDtBQUNEO0FBQ0Y7O0FBQ0RSLEVBQUFBLFVBQVUsQ0FBQ2EsVUFBRCxFQUFhO0FBQ3JCLFNBQUtQLFFBQUwsQ0FBZTtBQUNiUCxNQUFBQSxPQUFPLEVBQUUsQ0FBQyxHQUFHLEtBQUtILEtBQUwsQ0FBV0UsYUFBZixFQUE4QmUsVUFBOUI7QUFESSxLQUFmO0FBR0Q7O0FBQ0RWLEVBQUFBLGdCQUFnQixDQUFDSSxHQUFELEVBQU07QUFDcEIsUUFBSUMsTUFBTSxHQUFHLEtBQUtaLEtBQUwsQ0FBV0UsYUFBeEI7QUFDQSxRQUFJVyxLQUFLLEdBQUdELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxLQUFLLENBQUNKLEdBQUQsQ0FBcEIsQ0FBWjs7QUFDQSxRQUFJRSxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCRCxNQUFBQSxNQUFNLENBQUNJLE1BQVAsQ0FBY0gsS0FBZCxFQUFxQixDQUFyQjtBQUNBLFdBQUtILFFBQUwsQ0FBYztBQUFDUixRQUFBQSxhQUFhLEVBQUVVO0FBQWhCLE9BQWQ7QUFDRDtBQUNGOztBQUNETSxFQUFBQSxrQkFBa0IsQ0FBQ0MsU0FBRCxFQUFZO0FBQzVCLFFBQUcsS0FBS3BCLEtBQUwsQ0FBV3FCLE1BQVgsS0FBc0JELFNBQVMsQ0FBQ0MsTUFBbkMsRUFBMkM7QUFDekMsV0FBS1YsUUFBTCxDQUFjO0FBQUNSLFFBQUFBLGFBQWEsRUFBRSxLQUFLSCxLQUFMLENBQVdxQjtBQUEzQixPQUFkO0FBQ0Q7QUFDRjs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsd0JBQ0YsK0NBQ0U7QUFBUSxNQUFBLE9BQU8sRUFDWkMsS0FBRCxJQUFXO0FBQ1hBLFFBQUFBLEtBQUssQ0FBQ0MsY0FBTjtBQUNBLGFBQUt4QixLQUFMLENBQVd5QixZQUFYLENBQXdCLEtBQUt4QixLQUFMLENBQVdDLFdBQW5DO0FBQ0M7QUFKSCxpQkFERixlQU1FO0FBQVEsTUFBQSxPQUFPLEVBQUlxQixLQUFELElBQVc7QUFDN0JBLFFBQUFBLEtBQUssQ0FBQ0MsY0FBTixHQUQ2QixDQUU3Qjs7QUFDQSxhQUFLeEIsS0FBTCxDQUFXeUIsWUFBWCxDQUF3QixLQUFLeEIsS0FBTCxDQUFXRSxhQUFuQztBQUNDO0FBSkQsbUJBTkYsZUFXRSxvQkFBQyxVQUFEO0FBQVksTUFBQSxVQUFVLEVBQUUsS0FBS0YsS0FBTCxDQUFXRyxPQUFuQztBQUE0QyxNQUFBLFlBQVksRUFBRSxLQUFLc0IsZUFBL0Q7QUFBZ0YsTUFBQSxVQUFVLEVBQUUsS0FBS3JCLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLElBQXJCLENBQTVGO0FBQXdILE1BQUEsU0FBUyxFQUFFLEtBQUtELFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLElBQXJCO0FBQW5JLE1BWEYsQ0FERTtBQWVIOztBQWhFbUM7O0FBb0V0QyxlQUFlVixPQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1vdmllTmFtZXMgZnJvbSAnLi9Nb3ZpZU5hbWVzLmpzJztcbmNsYXNzIFdhdGNoZWQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgd2F0Y2hlZExpc3Q6ICBbXSxcbiAgICAgIHVud2F0Y2hlZExpc3Q6IFtdLFxuICAgICAgY3VyclZpZDogW10sXG4gICAgfVxuXG4gICAgdGhpcy5hZGRUb1VXQXJyID0gdGhpcy5hZGRUb1VXQXJyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hZGRUb1dBcnIgPSB0aGlzLmFkZFRvV0Fyci5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlRnJvbVVOV0FyciA9IHRoaXMucmVtb3ZlRnJvbVVOV0Fyci5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlRnJvbVdBcnIgPSB0aGlzLnJlbW92ZUZyb21XQXJyLmJpbmQodGhpcyk7XG5cbiAgfVxuXG4gIGFkZFRvV0FycihuZXdPYmplY3QpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHdhdGNoZWRMaXN0OiBbLi4udGhpcy5zdGF0ZS53YXRjaGVkTGlzdCwgbmV3T2JqZWN0XVxuICAgIH0pO1xuICB9XG4gIHJlbW92ZUZyb21XQXJyKGtleSkge1xuICAgIHZhciBuZXdBcnIgPSB0aGlzLnN0YXRlLndhdGNoZWRMaXN0O1xuICAgIHZhciBpbmRleCA9IG5ld0Fyci5pbmRleE9mKGFycmF5W2tleV0pO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIG5ld0Fyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7d2F0Y2hlZExpc3Q6IG5ld0Fycn0pO1xuICAgIH1cbiAgfVxuICBhZGRUb1VXQXJyKG9iamVjdEl0ZW0pIHtcbiAgICB0aGlzLnNldFN0YXRlKCB7XG4gICAgICBjdXJyVmlkOiBbLi4udGhpcy5zdGF0ZS51bndhdGNoZWRMaXN0ICxvYmplY3RJdGVtXVxuICAgIH0pO1xuICB9XG4gIHJlbW92ZUZyb21VTldBcnIoa2V5KSB7XG4gICAgdmFyIG5ld0FyciA9IHRoaXMuc3RhdGUudW53YXRjaGVkTGlzdDtcbiAgICB2YXIgaW5kZXggPSBuZXdBcnIuaW5kZXhPZihhcnJheVtrZXldKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBuZXdBcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3Vud2F0Y2hlZExpc3Q6IG5ld0Fycn0pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYodGhpcy5wcm9wcy5tb3ZpZXMgIT09IHByZXZQcm9wcy5tb3ZpZXMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3Vud2F0Y2hlZExpc3Q6IHRoaXMucHJvcHMubW92aWVzfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIChcbiAgICA8Zm9ybT5cbiAgICAgIDxidXR0b24gb25DbGljaz0ge1xuICAgICAgICAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5wcm9wcy5jaG9vc2VNb3ZpZXModGhpcy5zdGF0ZS53YXRjaGVkTGlzdCk7XG4gICAgICAgIH19ID53YXRjaGVkPC9idXR0b24+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9eyAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyB0aGlzLnNldFN0YXRlKHtjdXJyVmlkOiB0aGlzLnN0YXRlLnVud2F0Y2hlZExpc3R9KX1cbiAgICAgIHRoaXMucHJvcHMuY2hvb3NlTW92aWVzKHRoaXMuc3RhdGUudW53YXRjaGVkTGlzdCk7XG4gICAgICB9fT51bndhdGNoZWQ8L2J1dHRvbj5cbiAgICAgIDxNb3ZpZU5hbWVzIG1vdmllVGl0bGU9e3RoaXMuc3RhdGUuY3VyclZpZH0gcmVtb3ZlZnJvbVVXPXt0aGlzLnJlbW92ZUZyb21VV0Fycn0gYWRkVG9VV0Fycj17dGhpcy5hZGRUb1VXQXJyLmJpbmQodGhpcyl9IGFkZFRvV0Fycj17dGhpcy5hZGRUb1VXQXJyLmJpbmQodGhpcyl9Lz5cbiAgICA8L2Zvcm0+XG4gICAgICApXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBXYXRjaGVkOyJdfQ==